#!/usr/bin/env python

import MDAnalysis as mda
from MDAnalysis.topology.guessers import guess_atom_element
import argparse
import sys


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Converter to CP2K xyz files and charge constraits')
    parser.add_argument('infile', help='input file')
    parser.add_argument('outname', nargs='?', default='out', help='output base name')
    args = parser.parse_args()

    u = mda.Universe(args.infile, guess_bonds=False)

    equiv_group = u.atoms.groupby('names')
    header = '!include file generated by {} from {}\n'.format(sys.argv[0], args.infile)
    constr_str = header
    for atom_name in sorted(equiv_group.keys()):
        constr_str += '!equiv sites of type: {}\n'.format(atom_name)
        constr_str += '&CONSTRAINT\n'
        constr_str += '   EQUAL_CHARGES\n'
        constr_str += '   ATOM_LIST {}\n'.format(' '.join(map(str, equiv_group[atom_name].ids)))
        constr_str += '&END CONSTRAINT\n'

    elements = [aname.rstrip('0123456789').upper() for aname in u.atoms.names]
    # save files
    with open(args.outname+'_constr.inc', 'w') as f:
        f.write(constr_str)
    with open(args.outname+'_coords.inc', 'w') as f:
        for i in range(u.atoms.n_atoms):
            f.write('{:5s} {:12.5f} {:12.5f} {:12.5f}\n'.format(elements[i], *u.coord[i]))
    with mda.Writer(args.outname+'_symkinds.xyz', n_atoms=u.atoms.n_atoms) as w:
        w.write(u.atoms)
    with mda.Writer(args.outname+'_elements.xyz', n_atoms=u.atoms.n_atoms, atoms=elements) as w:
        w.write(u.trajectory[0])
